apiVersion: v1
kind: Namespace
metadata:
  name: dashboard
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    k8s-app: dashboard
  name: dashboard
  namespace: dashboard
---
kind: Service
apiVersion: v1
metadata:
  labels:
    k8s-app: dashboard
  name: dashboard
  namespace: dashboard
spec:
  ports:
    - port: 80
      targetPort: 8080
  selector:
    k8s-app: dashboard
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: dashboard
  namespace: dashboard
  annotations:
    kubernetes.io/ingress.class: "traefik"
spec:
  rules:
  - host: kube.noverit.com
    http:
      paths:
      - backend:
          serviceName: dashboard
          servicePort: 80
        path: /
---
apiVersion: v1
kind: Secret
metadata:
  labels:
    k8s-app: dashboard
  name: dashboard-certs
  namespace: dashboard
type: Opaque
---
apiVersion: v1
kind: Secret
metadata:
  labels:
    k8s-app: dashboard
  name: kubernetes-dashboard-csrf
  namespace: dashboard
type: Opaque
data:
  csrf: ""
---
apiVersion: v1
kind: Secret
metadata:
  labels:
    k8s-app: dashboard
  name: dashboard-key-holder
  namespace: dashboard
type: Opaque
---
kind: ConfigMap
apiVersion: v1
metadata:
  labels:
    k8s-app: dashboard
  name: dashboard-settings
  namespace: dashboard
---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  labels:
    k8s-app: dashboard
  name: dashboard
  namespace: dashboard
rules:
  # Allow Dashboard to get, update and delete Dashboard exclusive secrets.
  - apiGroups: [""]
    resources: ["secrets"]
    #resourceNames: ["dashboard-key-holder", "dashboard-certs", "kubernetes-dashboard-csrf"]
    verbs: ["create", "get", "update", "delete"]
    # Allow Dashboard to get and update 'dashboard-settings' config map.
  - apiGroups: [""]
    resources: ["configmaps"]
    resourceNames: ["dashboard-settings"]
    verbs: ["get", "update"]
    # Allow Dashboard to get metrics.
  - apiGroups: [""]
    resources: ["services"]
    resourceNames: ["heapster", "dashboard-metrics-scraper"]
    verbs: ["proxy"]
  - apiGroups: [""]
    resources: ["services/proxy"]
    resourceNames: ["heapster", "http:heapster:", "https:heapster:", "dashboard-metrics-scraper", "http:dashboard-metrics-scraper"]
    verbs: ["get"]
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  labels:
    k8s-app: dashboard
  name: dashboard
rules:
  # Allow Metrics Scraper to get metrics from the Metrics server
  - apiGroups: ["metrics.k8s.io"]
    resources: ["pods", "nodes"]
    verbs: ["get", "list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    k8s-app: dashboard
  name: dashboard
  namespace: dashboard
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: dashboard
subjects:
  - kind: ServiceAccount
    name: dashboard
    namespace: dashboard
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: dashboard
  namespace: dashboard
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: dashboard
subjects:
  - kind: ServiceAccount
    name: dashboard
    namespace: dashboard
---
kind: Deployment
apiVersion: apps/v1
metadata:
  labels:
    k8s-app: dashboard
  name: dashboard
  namespace: dashboard
spec:
  replicas: 1
  selector:
    matchLabels:
      k8s-app: dashboard
  template:
    metadata:
      labels:
        k8s-app: dashboard
    spec:
      containers:
        - name: dashboard
          image: kubernetesui/dashboard:v2.0.0-beta6
          imagePullPolicy: Always
          ports:
            - containerPort: 8443
              protocol: TCP
          args:
            - --namespace=dashboard
            - --insecure-bind-address=0.0.0.0 # dashboard sits behind traefik
            - --insecure-port=8080
            - --enable-insecure-login
          volumeMounts:
              # Create on-disk volume to store exec logs
            - mountPath: /tmp
              name: tmp-volume
          livenessProbe:
            httpGet:
              scheme: HTTP
              path: /
              port: 8080
            initialDelaySeconds: 30
            timeoutSeconds: 30
      volumes:
        - name: tmp-volume
          emptyDir: {}
      serviceAccountName: dashboard
      # Comment the following tolerations if Dashboard must not be deployed on master
      tolerations:
        - key: node-role.kubernetes.io/master
          effect: NoSchedule
---
kind: Service
apiVersion: v1
metadata:
  labels:
    k8s-app: kubernetes-metrics-scraper
  name: dashboard-metrics-scraper
  namespace: dashboard
spec:
  ports:
    - port: 8000
      targetPort: 8000
  selector:
    k8s-app: kubernetes-metrics-scraper
---
kind: Deployment
apiVersion: apps/v1
metadata:
  labels:
    k8s-app: kubernetes-metrics-scraper
  name: kubernetes-metrics-scraper
  namespace: dashboard
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      k8s-app: kubernetes-metrics-scraper
  template:
    metadata:
      labels:
        k8s-app: kubernetes-metrics-scraper
    spec:
      containers:
        - name: kubernetes-metrics-scraper
          image: kubernetesui/metrics-scraper:v1.0.0
          ports:
            - containerPort: 8000
              protocol: TCP
          livenessProbe:
            httpGet:
              scheme: HTTP
              path: /
              port: 8000
            initialDelaySeconds: 30
            timeoutSeconds: 30
      serviceAccountName: dashboard
      # Comment the following tolerations if Dashboard must not be deployed on master
      tolerations:
        - key: node-role.kubernetes.io/master
          effect: NoSchedule