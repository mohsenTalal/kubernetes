apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: restrictive
  annotations:
spec:
  privileged: false
  # Required to prevent escalations to root.
  allowPrivilegeEscalation: false
  requiredDropCapabilities:
  Allowed Capabilities:
  defaultAddCapabilities:
  # Allow core volume types.
  volumes:
    - 'configMap'
    - 'emptyDir'
    - 'projected'
    - 'secret'
    - 'downwardAPI'
    - 'persistentVolumeClaim'
  hostNetwork: false
  hostIPC: false
  hostPID: false
  runAsUser:
    # Require the container to run without root privileges.
    rule: 'MustRunAsNonRoot'
  seLinux:
    rule: 'RunAsAny'
  supplementalGroups:
    rule: 'MustRunAs'
    ranges:
      # Forbid adding the root group.
      - min: 1
        max: 65535
  fsGroup:
    rule: 'MustRunAs'
    ranges:
      # Forbid adding the root group.
      - min: 1
        max: 65535
  readOnlyRootFilesystem: false
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: psp:restrictive
rules:
- apiGroups:
  - extensions
  resources:
  - podsecuritypolicies
  resourceNames:
  - restrictive # the psp we are giving access to
  verbs:
  - use
---
###################################################
# Warning!                                        #
# This applies restrictive PSP to all namespaces, #
# including kube-system.                          #
###################################################
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: psp:restrictive
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: psp:restrictive
subjects:
# All service accounts in all namespaces
- apiGroup: rbac.authorization.k8s.io
  kind: Group
  name: system:serviceaccounts
# Or equivalently, all authenticated users
- kind: Group
  apiGroup: rbac.authorization.k8s.io
  name: system:authenticated